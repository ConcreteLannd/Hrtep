// 1820
$breakpoint_lpm: (
  "lpm": "screen and (max-width: #{$bp_lpm_max_width+1}px)"
) !default;

// min-width
$breakpoint_lp: (
  "lp": "screen and (max-width: #{$bp_lp_max_width+1}px)"
) !default;

// max-width
$breakpoint_pc: (
  "pcm": "screen and (max-width: #{$bp_pc_max_width}px)"
) !default;
// min-width
$breakpoint_up: (
  "pc": "screen and (max-width: #{$bp_pc_min_width}px)"
) !default;

// min-width
$breakpoint_tab: (
  "tab": "screen and (max-width: #{$bp_tab_max_width}px)"
) !default;

// max-width
$breakpoint_down: (
  "sp": "screen and (max-width: #{$bp_sp_max_width}px)"
) !default;

// max-width mb
$breakpoint_downmp: (
  "mb": "screen and (max-width: #{$bp_mb_max_width}px)"
) !default;

@mixin mq_up($breakpoint) {
  @media #{map-get($breakpoint_up, $breakpoint)} {
    @content;
  }
}
@mixin mq_pcm($breakpoint) {
  @media #{map-get($breakpoint_pc, $breakpoint)} {
    @content;
  }
}

@mixin mq_lpm($breakpoint) {
  @media #{map-get($breakpoint_lpm, $breakpoint)} {
    @content;
  }
}
@mixin mq_lp($breakpoint) {
  @media #{map-get($breakpoint_lp, $breakpoint)} {
    @content;
  }
}

@mixin mq_tab($breakpoint) {
  @media #{map-get($breakpoint_tab, $breakpoint)} {
    @content;
  }
}

@mixin mq_down($breakpoint) {
  @media #{map-get($breakpoint_down, $breakpoint)} {
    @content;
  }
}

@mixin mq_mb($breakpoint) {
  @media #{map-get($breakpoint_downmp, $breakpoint)} {
    @content;
  }
}

@function setvw($target) {
  $vw: (768 * 0.01) * 1px;

  @return ($target / $vw) * 1vw;
}

@function setvwpc($target) {
  $vw: (1440 * 0.01) * 1px;

  @return ($target / $vw) * 1vw;
}

@mixin fs($fontsize: 14, $lineheight: 22, $base: 10) {
  font-size: $fontsize + px;
  font-size: ($fontsize / $base) * 1rem;
  line-height: ceil($lineheight * 1000 / $fontsize) / 1000;
}

@mixin fs-vw($fontsize: 14, $lineheight: 22, $area-width: 768) {
  font-size: #{($fontsize / $area-width) * 100}vw;
  line-height: ceil($lineheight * 1000 / $fontsize) / 1000;
}

@mixin fs-vwpc($fontsize: 14, $lineheight: 22, $area-width: 1920) {
  font-size: #{($fontsize / $area-width) * 100}vw;
  line-height: ceil($lineheight * 1000 / $fontsize) / 1000;
}

@function cent($value, $container) {
  @return ($value * 100%) / $container;
}
//使用例
// .foo {
//   color: blue;
//   @include mq_up(pc) { // pcより大きい場合
//     color: yellow;
//   }
//   @include mq_down(sm) { // smより小さい場合=sm
//     color: red;
//   }
// }

@mixin bp($bp_1: 0, $bp_2: 0) {
  $bp_subsp: 320;
  $bp_main: 425;
  $bp_sub: 768;

  @if $bp_1=='tab' {
    @media (max-width: #{$bp_sub}px) {
      @content;
    }
  }

  @else if $bp_1=='pc' {
    @media (min-width: #{$bp_sub + 1}px) {
      @content;
    }
  }

  @else if $bp_1=='ls' {
    @media (orientation: landscape) {
      @content;
    }
  }

  @else if $bp_1=='pt' {
    @media (orientation: portrait) {
      @content;
    }
  }

  @elseif $bp_1=='ie11' {
    @media all and (-ms-high-contrast: none) {
      @content;
    }
  }

  @else if $bp_1=='edge' {
    @supports (-ms-ime-align: auto) {
      @content;
    }
  }

  @else {
    @if $bp_1 !=0 and $bp_2 !=0 {
      @media (min-width: $bp_1) and (max-width: $bp_2) {
        @content;
      }
    }

    @elseif $bp_1==0 {
      @media (max-width: $bp_2) {
        @content;
      }
    }

    @elseif $bp_2==0 {
      @media (min-width: $bp_1) {
        @content;
      }
    }
  }
}

@mixin clearfix {
  &::after {
    content: '';
    display: block;
    clear: both;
  }
}

@mixin auto() {
  margin-right: auto;
  margin-left: auto;
}

@mixin plr($px) {
  padding-right: $px;
  padding-left: $px;
}

@mixin mlr($px) {
  margin-right: $px;
  margin-left: $px;
}

@function cent($value, $container) {
  @return ($value * 100%) / $container;
}

@mixin img_hover($opacity: 0.7, $transition: 0.3s) {
  transition: $transition;

  &:hover {
    opacity: $opacity;
  }
}
